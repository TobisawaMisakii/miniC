
// Generated from /home/cpy/Compiler/exp04-minic-expr/frontend/antlr4/SysY.g4 by ANTLR 4.12.0


#include "SysYLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "Ident", "IntConst", "DecimalConst", "OctalConst", "HexadecimalConst", 
      "HexadecimalPrefix", "NonzeroDigit", "Digit", "OctalDigit", "HexadecimalDigit", 
      "FloatConst", "ExponentPart", "WS", "COMMENT", "BLOCK_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "','", "';'", "'int'", "'float'", "'['", "']'", "'='", 
      "'{'", "'}'", "'('", "')'", "'void'", "'if'", "'else'", "'while'", 
      "'break'", "'continue'", "'return'", "'+'", "'-'", "'!'", "'*'", "'/'", 
      "'%'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "Ident", "IntConst", "DecimalConst", "OctalConst", "HexadecimalConst", 
      "HexadecimalPrefix", "NonzeroDigit", "Digit", "OctalDigit", "HexadecimalDigit", 
      "FloatConst", "ExponentPart", "WS", "COMMENT", "BLOCK_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,48,323,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
  	1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,
  	1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
  	1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,
  	1,32,1,32,1,33,1,33,5,33,209,8,33,10,33,12,33,212,9,33,1,34,1,34,1,34,
  	3,34,217,8,34,1,35,1,35,5,35,221,8,35,10,35,12,35,224,9,35,1,36,1,36,
  	5,36,228,8,36,10,36,12,36,231,9,36,1,37,1,37,4,37,235,8,37,11,37,12,37,
  	236,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,4,43,
  	251,8,43,11,43,12,43,252,1,43,1,43,5,43,257,8,43,10,43,12,43,260,9,43,
  	1,43,3,43,263,8,43,1,43,1,43,4,43,267,8,43,11,43,12,43,268,1,43,3,43,
  	272,8,43,1,43,4,43,275,8,43,11,43,12,43,276,1,43,1,43,3,43,281,8,43,1,
  	44,1,44,3,44,285,8,44,1,44,4,44,288,8,44,11,44,12,44,289,1,45,4,45,293,
  	8,45,11,45,12,45,294,1,45,1,45,1,46,1,46,1,46,1,46,5,46,303,8,46,10,46,
  	12,46,306,9,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,314,8,47,10,47,12,47,
  	317,9,47,1,47,1,47,1,47,1,47,1,47,1,315,0,48,1,1,3,2,5,3,7,4,9,5,11,6,
  	13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,42,85,43,87,44,89,45,91,46,93,47,95,48,1,0,11,3,0,65,90,95,95,97,122,
  	4,0,48,57,65,90,95,95,97,122,2,0,88,88,120,120,1,0,49,57,1,0,48,57,1,
  	0,48,55,3,0,48,57,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,3,0,
  	9,10,13,13,32,32,2,0,10,10,13,13,341,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
  	0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
  	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
  	0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
  	81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
  	0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,103,1,0,0,0,5,105,1,0,
  	0,0,7,107,1,0,0,0,9,111,1,0,0,0,11,117,1,0,0,0,13,119,1,0,0,0,15,121,
  	1,0,0,0,17,123,1,0,0,0,19,125,1,0,0,0,21,127,1,0,0,0,23,129,1,0,0,0,25,
  	131,1,0,0,0,27,136,1,0,0,0,29,139,1,0,0,0,31,144,1,0,0,0,33,150,1,0,0,
  	0,35,156,1,0,0,0,37,165,1,0,0,0,39,172,1,0,0,0,41,174,1,0,0,0,43,176,
  	1,0,0,0,45,178,1,0,0,0,47,180,1,0,0,0,49,182,1,0,0,0,51,184,1,0,0,0,53,
  	186,1,0,0,0,55,188,1,0,0,0,57,191,1,0,0,0,59,194,1,0,0,0,61,197,1,0,0,
  	0,63,200,1,0,0,0,65,203,1,0,0,0,67,206,1,0,0,0,69,216,1,0,0,0,71,218,
  	1,0,0,0,73,225,1,0,0,0,75,232,1,0,0,0,77,238,1,0,0,0,79,241,1,0,0,0,81,
  	243,1,0,0,0,83,245,1,0,0,0,85,247,1,0,0,0,87,280,1,0,0,0,89,282,1,0,0,
  	0,91,292,1,0,0,0,93,298,1,0,0,0,95,309,1,0,0,0,97,98,5,99,0,0,98,99,5,
  	111,0,0,99,100,5,110,0,0,100,101,5,115,0,0,101,102,5,116,0,0,102,2,1,
  	0,0,0,103,104,5,44,0,0,104,4,1,0,0,0,105,106,5,59,0,0,106,6,1,0,0,0,107,
  	108,5,105,0,0,108,109,5,110,0,0,109,110,5,116,0,0,110,8,1,0,0,0,111,112,
  	5,102,0,0,112,113,5,108,0,0,113,114,5,111,0,0,114,115,5,97,0,0,115,116,
  	5,116,0,0,116,10,1,0,0,0,117,118,5,91,0,0,118,12,1,0,0,0,119,120,5,93,
  	0,0,120,14,1,0,0,0,121,122,5,61,0,0,122,16,1,0,0,0,123,124,5,123,0,0,
  	124,18,1,0,0,0,125,126,5,125,0,0,126,20,1,0,0,0,127,128,5,40,0,0,128,
  	22,1,0,0,0,129,130,5,41,0,0,130,24,1,0,0,0,131,132,5,118,0,0,132,133,
  	5,111,0,0,133,134,5,105,0,0,134,135,5,100,0,0,135,26,1,0,0,0,136,137,
  	5,105,0,0,137,138,5,102,0,0,138,28,1,0,0,0,139,140,5,101,0,0,140,141,
  	5,108,0,0,141,142,5,115,0,0,142,143,5,101,0,0,143,30,1,0,0,0,144,145,
  	5,119,0,0,145,146,5,104,0,0,146,147,5,105,0,0,147,148,5,108,0,0,148,149,
  	5,101,0,0,149,32,1,0,0,0,150,151,5,98,0,0,151,152,5,114,0,0,152,153,5,
  	101,0,0,153,154,5,97,0,0,154,155,5,107,0,0,155,34,1,0,0,0,156,157,5,99,
  	0,0,157,158,5,111,0,0,158,159,5,110,0,0,159,160,5,116,0,0,160,161,5,105,
  	0,0,161,162,5,110,0,0,162,163,5,117,0,0,163,164,5,101,0,0,164,36,1,0,
  	0,0,165,166,5,114,0,0,166,167,5,101,0,0,167,168,5,116,0,0,168,169,5,117,
  	0,0,169,170,5,114,0,0,170,171,5,110,0,0,171,38,1,0,0,0,172,173,5,43,0,
  	0,173,40,1,0,0,0,174,175,5,45,0,0,175,42,1,0,0,0,176,177,5,33,0,0,177,
  	44,1,0,0,0,178,179,5,42,0,0,179,46,1,0,0,0,180,181,5,47,0,0,181,48,1,
  	0,0,0,182,183,5,37,0,0,183,50,1,0,0,0,184,185,5,60,0,0,185,52,1,0,0,0,
  	186,187,5,62,0,0,187,54,1,0,0,0,188,189,5,60,0,0,189,190,5,61,0,0,190,
  	56,1,0,0,0,191,192,5,62,0,0,192,193,5,61,0,0,193,58,1,0,0,0,194,195,5,
  	61,0,0,195,196,5,61,0,0,196,60,1,0,0,0,197,198,5,33,0,0,198,199,5,61,
  	0,0,199,62,1,0,0,0,200,201,5,38,0,0,201,202,5,38,0,0,202,64,1,0,0,0,203,
  	204,5,124,0,0,204,205,5,124,0,0,205,66,1,0,0,0,206,210,7,0,0,0,207,209,
  	7,1,0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,
  	0,211,68,1,0,0,0,212,210,1,0,0,0,213,217,3,71,35,0,214,217,3,73,36,0,
  	215,217,3,75,37,0,216,213,1,0,0,0,216,214,1,0,0,0,216,215,1,0,0,0,217,
  	70,1,0,0,0,218,222,3,79,39,0,219,221,3,81,40,0,220,219,1,0,0,0,221,224,
  	1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,72,1,0,0,0,224,222,1,0,0,
  	0,225,229,5,48,0,0,226,228,3,83,41,0,227,226,1,0,0,0,228,231,1,0,0,0,
  	229,227,1,0,0,0,229,230,1,0,0,0,230,74,1,0,0,0,231,229,1,0,0,0,232,234,
  	3,77,38,0,233,235,3,85,42,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,
  	0,0,0,236,237,1,0,0,0,237,76,1,0,0,0,238,239,5,48,0,0,239,240,7,2,0,0,
  	240,78,1,0,0,0,241,242,7,3,0,0,242,80,1,0,0,0,243,244,7,4,0,0,244,82,
  	1,0,0,0,245,246,7,5,0,0,246,84,1,0,0,0,247,248,7,6,0,0,248,86,1,0,0,0,
  	249,251,3,81,40,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,
  	253,1,0,0,0,253,254,1,0,0,0,254,258,5,46,0,0,255,257,3,81,40,0,256,255,
  	1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,262,1,0,0,
  	0,260,258,1,0,0,0,261,263,3,89,44,0,262,261,1,0,0,0,262,263,1,0,0,0,263,
  	281,1,0,0,0,264,266,5,46,0,0,265,267,3,81,40,0,266,265,1,0,0,0,267,268,
  	1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,272,3,89,
  	44,0,271,270,1,0,0,0,271,272,1,0,0,0,272,281,1,0,0,0,273,275,3,81,40,
  	0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,
  	278,1,0,0,0,278,279,3,89,44,0,279,281,1,0,0,0,280,250,1,0,0,0,280,264,
  	1,0,0,0,280,274,1,0,0,0,281,88,1,0,0,0,282,284,7,7,0,0,283,285,7,8,0,
  	0,284,283,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,288,3,81,40,0,287,
  	286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,90,1,
  	0,0,0,291,293,7,9,0,0,292,291,1,0,0,0,293,294,1,0,0,0,294,292,1,0,0,0,
  	294,295,1,0,0,0,295,296,1,0,0,0,296,297,6,45,0,0,297,92,1,0,0,0,298,299,
  	5,47,0,0,299,300,5,47,0,0,300,304,1,0,0,0,301,303,8,10,0,0,302,301,1,
  	0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,
  	306,304,1,0,0,0,307,308,6,46,0,0,308,94,1,0,0,0,309,310,5,47,0,0,310,
  	311,5,42,0,0,311,315,1,0,0,0,312,314,9,0,0,0,313,312,1,0,0,0,314,317,
  	1,0,0,0,315,316,1,0,0,0,315,313,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,
  	0,318,319,5,42,0,0,319,320,5,47,0,0,320,321,1,0,0,0,321,322,6,47,0,0,
  	322,96,1,0,0,0,18,0,210,216,222,229,236,252,258,262,268,271,276,280,284,
  	289,294,304,315,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysY.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
